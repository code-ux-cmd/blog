<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSM框架之汽车租赁系统</title>
    <url>/blog/2020/10/06/SSM%E6%A1%86%E6%9E%B6%E4%B9%8B%E6%B1%BD%E8%BD%A6%E7%A7%9F%E8%B5%81%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>使用Layui+SSM框架：主要分为三大块功能：<strong>业务管理</strong>，<strong>系统管理</strong>，<strong>数据统计</strong>，其中<strong>业务管理</strong>功能包括客户管理的添加，修改，删除，导出（excel）；车辆管理的添加，修改，上传（图片使用异步上传）；汽车出租的添加，修改，删除；出租单管理的修改，删除，导出（出租单二维码）；车辆入库功能的查询，修改，导出（excel）；<strong>系统管理</strong>的：菜单管理，角色管理，用户管理，修改密码，日志管理，系统公告，数据源监控（调用阿里巴巴提供的接口，可以分析那个sql语句执行的快，那个执行的慢，用来优化）；<strong>数据统计</strong>：客户地区统计（饼图），公司年度月份销售额（折线图），业务员年度销售额（柱状图）</p>
<a id="more"></a>

<h1 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h1><h1 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h1><blockquote>
<p>涉及到11张表</p>
</blockquote>
<h2 id="业务表"><a href="#业务表" class="headerlink" title="业务表"></a>业务表</h2><ul>
<li>客户表</li>
<li>车辆表</li>
<li>还车表</li>
</ul>
<h2 id="系统表（RBAC权限管理）"><a href="#系统表（RBAC权限管理）" class="headerlink" title="系统表（RBAC权限管理）"></a>系统表（RBAC权限管理）</h2><ul>
<li>菜单表</li>
<li>用户表</li>
<li>角色表</li>
<li>角色和菜单关系表</li>
<li>用户和角色和关系表</li>
</ul>
<h2 id="系统表（其他）"><a href="#系统表（其他）" class="headerlink" title="系统表（其他）"></a>系统表（其他）</h2><ul>
<li>登录日志表</li>
<li>系统公告表</li>
</ul>
]]></content>
      <categories>
        <category>SSM项目实战</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ssm框架</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2020/10/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习</title>
    <url>/blog/2020/10/06/java%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>java介绍</p>
<a id="more"></a>

<h1 id="java泛型"><a href="#java泛型" class="headerlink" title="java泛型"></a>java泛型</h1><blockquote>
<p>Java泛型方法和泛型类支持程序员使用一个方法指定一组相关方法，或者使用一个类指定一组相关的类型。</p>
<p>Java泛型（generics）是JDK 5中引入的一个新特性,泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。</p>
<p> 使用Java泛型的概念，我们可以写一个泛型方法来对一个对象数组排序。然后，调用该泛型方法来对整型数组、浮点数数组、字符串数组等进行排序。</p>
</blockquote>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><blockquote>
<p>可以写一个方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用</p>
</blockquote>
<ul>
<li><p>定义泛型方法的规则</p>
<ul>
<li>所有泛型方法声明都有一个参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前</li>
<li>每一个类型参数声明部分都包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li>
<li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符</li>
<li>泛型方法方法体的声明和其他方法一样。</li>
</ul>
<p><strong>注意：</strong> 类型参数只能代表引用类型，不能是原始类型（像int，double，char等）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="comment">//泛型方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] inputArray)</span></span>&#123;</span><br><span class="line">		<span class="comment">//输出数组元素</span></span><br><span class="line">		<span class="keyword">for</span>(E element:inputArray)&#123;</span><br><span class="line">			System.out.printf(<span class="string">&quot;%s &quot;</span>,element);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ages)</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建不同类型数组</span></span><br><span class="line">		Integer[] intArray = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">		Double[] doubleArray = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>&#125;;</span><br><span class="line">		Character[] charArray = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">&quot;Array integerArray contains:&quot;</span>);</span><br><span class="line">		printArray(intArray);</span><br><span class="line">		System.out.println(<span class="string">&quot;Array doubleArray contains:&quot;</span>);</span><br><span class="line">		printArray(doubleArray);</span><br><span class="line">		System.out.println(<span class="string">&quot;Array characterArray contains:&quot;</span>);</span><br><span class="line">		printArray(charArray);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">    Array integerArray contains:</span><br><span class="line">    <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">    Array doubleArray contains:</span><br><span class="line">    <span class="number">1.1</span> <span class="number">2.2</span> <span class="number">3.3</span> <span class="number">4.4</span></span><br><span class="line">    Array characterArray contains:</span><br><span class="line">    H E L K</span><br></pre></td></tr></table></figure>

<h2 id="有界类型参数"><a href="#有界类型参数" class="headerlink" title="有界类型参数"></a>有界类型参数</h2><blockquote>
<p>可能有时候，你会想限制那些被允许传递到一个类型参数的类型种类范围。例如，一个操作数字的方法可能只希望接受Number或者Number子类的实例。这就是有界类型参数的目的。</p>
</blockquote>
<p>要声明一个有界的类型参数，首先列出类型参数的名称，后跟extends关键字，最后紧跟它的上界。</p>
<p><strong>实例：</strong></p>
<p>下面的例子演示了”extends”如何使用在一般意义上的意思”extends”（类）或者”implements”（接口）。该例子中的泛型方法返回三个可比较对象的最大值。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">   <span class="comment">// 比较三个值并返回最大值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; Tmaximum(T x, T y, T z)&#123;                     </span><br><span class="line">      T max = x; <span class="comment">// 假设x是初始最大值</span></span><br><span class="line">      <span class="keyword">if</span> ( y.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = y; <span class="comment">//y 更大</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( z.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = z; <span class="comment">// 现在 z 更大           </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max; <span class="comment">// 返回最大对象</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      System.out.printf( <span class="string">&quot;Max of %d, %d and %d is %d\n\n&quot;</span>,<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, maximum( <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ) );</span><br><span class="line"> 		System.out.printf( <span class="string">&quot;Maxm of %.1f,%.1f and %.1f is %.1f\n\n&quot;</span>,<span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span>, maximum( <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span> ) );</span><br><span class="line"> 		System.out.printf( <span class="string">&quot;Max of %s, %s and %s is %s\n&quot;</span>,<span class="string">&quot;pear&quot;</span>,<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, maximum( <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span> ) );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Maximum of <span class="number">3</span>, <span class="number">4</span> and <span class="number">5</span> is <span class="number">5</span></span><br><span class="line">    Maximum of <span class="number">6.6</span>, <span class="number">8.8</span> and <span class="number">7.7</span> is <span class="number">8.8</span></span><br><span class="line">    Maximum of pear, apple and orange is pear</span><br></pre></td></tr></table></figure>

<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><blockquote>
<p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。 </p>
<p>和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> T t;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.t = t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</span><br><span class="line">     Box&lt;String&gt; stringBox = <span class="keyword">new</span> Box&lt;String&gt;();</span><br><span class="line">   </span><br><span class="line">     integerBox.add(<span class="keyword">new</span> Integer(<span class="number">10</span>));</span><br><span class="line">     stringBox.add(<span class="keyword">new</span> String(<span class="string">&quot;Hello World&quot;</span>));</span><br><span class="line"> </span><br><span class="line">     System.out.printf(<span class="string">&quot;Integer Value :%d\n\n&quot;</span>, integerBox.get());</span><br><span class="line">     System.out.printf(<span class="string">&quot;String Value :%s\n&quot;</span>, stringBox.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    Integer Value :<span class="number">10</span></span><br><span class="line">	String Value :Hello World</span><br></pre></td></tr></table></figure>

<h1 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h1><p>Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。 </p>
<p>将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。 </p>
<p>整个过程都是Java虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。 </p>
<p>类<code>ObjectInputStream </code>和<code>ObjectOutputStream</code>是高层次的数据流，它们包含序列化和反序列化对象的方法。 </p>
<p><code>ObjectOutputStream </code>类包含很多写方法来写各种数据类型，但是一个特别的方法例外：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object x)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java复习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>复习</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
